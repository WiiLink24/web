---
import { changeLanguage } from "i18next";
import Layout from "../../../../layouts/Layout.astro";
import Header from "../../../../components/Header.astro";
import "../../../../styles/global.css";
import Loading from "../../../../components/Loading.astro";
import Footer from "../../../../components/Footer.astro";
import i18next, { t, changeLanguage } from "i18next";
import { localizePath } from "astro-i18next";
import { Trans, HeadHrefLangs } from "astro-i18next/components";

changeLanguage("vi");
---

<Layout />

<div class="data">
    <h2 style="animation:fadeup 0.2s forwards;" id="release-name"><i style="animation: loadspin 5s linear forwards infinite; scale:80%; margin-right:10px;"><img class="spinner" style="transform:translate(0, -3px); filter:;" src="img/loading.gif" width="30px"></i>{t("site.load")}</h2>
    <div style="animation:fadeup 200ms forwards;" class="about"><d class="hide">{t("site.dev")}<a href="https://github.com/PablosCorner">PablosCorner</d><img style="border-radius: 50%; margin-left:10px; transform:translate(0, -5px); filter:drop-shadow(0 0 10px #00000040)" src="img/pablo.webp" width="40px"></a></div>
    <div style="animation:fadeup 0.1s 200ms forwards; " class="accordion" id="accordionHeader">
        <div class="accordion-item">
          <h2 class="accordion-downloadInfo-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOneHeader" aria-expanded="false" aria-controls="collapseOneHeader">
            {t("site.relNotes")}
            </button>
          </h2>
          <div id="collapseOneHeader" class="accordion-collapse collapse" data-bs-parent="#accordionHeader">
            <div class="accordion-body" id="release-info"></div>
          </div>
        </div>
    </div>


<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

    <script>

        import { Octokit } from "https://esm.sh/octokit";
        
        
        document.addEventListener("DOMContentLoaded", async function () {
            const octokit = new Octokit({
                auth: ''
            });
        
            const owner = 'WiiLink24';
            const repo = 'WiiLink24-Patcher';
        
            try {
                // Fetch the latest release information from the GitHub repository using Octokit
                const { data: release } = await octokit.request('GET /repos/{owner}/{repo}/releases/latest', {
                    owner,
                    repo,
                    headers: {
                        'X-GitHub-Api-Version': '2022-11-28'
                    }
                });
        
                const releaseNameDiv = document.getElementById("release-name");
                const releaseInfoDiv = document.getElementById("release-info");
                const downloadLinkLinux = document.getElementById("download-link-linux");
                const downloadLinkWindows = document.getElementById("download-link-windows");
                const downloadLinkMacos = document.getElementById("download-link-macos");
        
                const nameArray = release.name.split(" ");
                let versionNumber = nameArray[2];
        
                if (releaseInfoDiv) {
                    // Update the div
                    releaseNameDiv.innerHTML = `
                    <a style="color:black; text-decoration:none;" href="https://github.com/WiiLink24/WiiLink24-Patcher/releases/latest"><h2 class="release-name" style="animation:fadeup 0.2s forwards;"><o style="font-family:Rubik; font-weight:600;">WiiLink</o> Patcher <span style="scale:60%; transform:translate(-30px, -20px);" class="badge rounded-pill bg-secondary">${versionNumber}</span></h2></a>
                    `
                    ;
                    releaseInfoDiv.innerHTML = `
                        <p id="releasedesc"></p>
                    `;
        
                    document.getElementById('releasedesc').innerHTML =
                      marked.parse(release.body);
        
        
                    // Update the download link if it exists
                    if (release.assets.length > 0) {
                        const assetLin = release.assets[0];
                        downloadLinkLinux.href = assetLin.browser_download_url;
                        const assetWin = release.assets[3]; 
                        downloadLinkWindows.href = assetWin.browser_download_url;
                        const assetMac = release.assets[2];
                        downloadLinkMacos.href = assetMac.browser_download_url;
                    } else {
                        downloadLinkLinux.style.display = "none";
                        downloadLinkWindows.style.display = "none";
                        downloadLinkMacos.style.display = "none";
                    }
                } else {
                    console.error("Element with id 'release-info' not found.");
                }
            } catch (error) {
                console.error("Error fetching GitHub release:", error);
            }
        });
        
        </script>